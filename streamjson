#!/usr/bin/env ruby -w0

require 'rubygems'
require 'optparse'
require 'xdg'
require 'parseconfig'
require 'net/http'
require 'uri'
require 'json'
require 'term/ansicolor'
require 'open-uri'
require 'tempfile'
require 'mime/types'
require 'ascii-image'

class String
    include Term::ANSIColor

    def valid_float?
        true if Float self rescue false
    end
end

class Color
    extend Term::ANSIColor
end

class Configuration
    def initialize
        @config_dir = File.join(XDG["CONFIG_HOME"].to_s, "streamjson")
        @config_file = File.join(@config_dir, "main.conf")
        
        if !File.exists? @config_dir
            Dir.mkdir @config_dir
        end
    end

    def set(server_location, player_command)
        if !File.exists? @config_file
            File.open(@config_file, "w+") do |file|
                file.write ""
            end
        end
        
        config = ParseConfig.new(@config_file)
        config.add_to_group "server", "location", server_location
        config.add_to_group "player", "command", player_command
        
        File.open(@config_file, "w+") do |file|
            config.write file
        end
        
        return config.params
    end
    
    def get
        if !File.exists? @config_file
            abort "Looks like you still haven't configured the client. Please run 'streamjson --configure <server location> <player command>'"
        end
        
        config = ParseConfig.new(@config_file)
        return { "server_location" => config["server"]["location"], "player_command" => config["player"]["command"] }
    end
end

class StreamJSON
    attr_accessor :server_location
    
    def initialize
        @config = Configuration.new
        @server_location = @config.get["server_location"]
        @player_command = @config.get["player_command"]
    end
    
    private
    def get_video_list
        url = "#{@server_location}/list"
        resp = Net::HTTP.get_response URI.parse(url)
        
        if resp.kind_of? Net::HTTPOK
            JSON.parse resp.body
        else
            abort "Could not connect to the stream.json server."
        end
    end
    
    def store_tmp_poster(id)
        uri = URI.parse "#{@server_location}/getPoster/#{id}"
        http = Net::HTTP.new(uri.host, uri.port)
        resp = http.get(uri.path)
        
        if resp.kind_of? Net::HTTPOK
            #resp.body
            ext = MIME::Types[resp["content-type"]].first.extensions.first
            
            File.open("/tmp/streamjson_#{id}.#{ext}", "wb+") do |file|
                file.write resp.body
                return file.path
            end
        else
            abort "Could not connect to the stream.json server."
        end
    end
    
    public
    def list
        # List videos.
        videos = get_video_list
        
        puts "Videos"
        videos["video"].each_with_index do |curr_video, index|
            print "    ", "#{index} ", "(#{curr_video["id"]})".cyan, ": ", "#{curr_video["title"]}".bold, "\n"
        end
    end
    
    def detail(id)
        # Details on the video.
        videos = get_video_list["video"]
        selected = nil
        
        if id.valid_float?
            selected = videos[id.to_i]
        elsif id.is_a? String
            selected = videos.select do |key, hash|
                key["id"] == id
            end
            selected = selected[0]
        else
            puts "You've entered a invalid ID."
        end
        
        if selected.nil?
            # ID doesn't exist
            puts "You've entered a ID that doesn't exist on the list."
        else
            # Show the details
            print Color.bold, selected["title"], Color.clear, "\n"
            
            poster = ASCII_Image.new store_tmp_poster(selected["id"])
            poster.build 15
            print "\n"
            
            puts selected["description"]["text"]
        end
    end
    
    def play(id)
        # Play video.
        videos = get_video_list["video"]
        selected = nil
        
        if id.valid_float?
            selected = videos[id.to_i]
        elsif id.is_a? String
            selected = videos.select do |key, hash|
                key["id"] == id
            end
            selected = selected[0]
        else
            puts "You've entered a invalid ID."
        end
        
        url = "#{@server_location}/getVideo/#{selected['id']}"
        resp = Net::HTTP.get_response URI.parse(url)
        video_location = resp.body
        
        exec "#{@player_command} #{video_location}"
    end
end

if __FILE__ == $0
    opt_parser = OptionParser.new do |opt|
        opt.version = "streamjson 0.1 (c) 2012 Nathan Campos\nThe awesome stream.json client for your awesome command-line."
        opt.banner = "Usage: streamjson option [id] [server_location | player_command]"
        opt.separator ""
        opt.separator "Options"
        
        # List videos
        opt.on("-l", "--list", "List videos") do
            StreamJSON.new.list
        end
        
        # Detail video.
        opt.on("-d", "--detail id", "Display details of a video") do |id|
            StreamJSON.new.detail id
        end
        
        # Play video.
        opt.on("-p", "--play id", "Plays the video") do |id|
            StreamJSON.new.play id
        end
        
        # Configure the client.
        opt.on("-c", "--configure server_location player_command", "Configure the client") do
            Configuration.new.set ARGV[1], ARGV[2]
        end
        
        # Usage
        opt.on("-h", "--help", "Help") do
            puts opt_parser
        end
    end
    
    if ARGV[0].nil?
        puts opt_parser
    else
        opt_parser.parse ARGV
    end
end